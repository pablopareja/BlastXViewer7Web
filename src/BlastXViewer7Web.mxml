<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   creationComplete="application1_creationCompleteHandler(event)"
			   implements="com.era7.communication.interfaces.ServerUploadable, com.era7.communication.interfaces.ServerCallable"			   
			   xmlns:search="com.era7.util.gui.search.*" 
			   backgroundColor="#3D3E3E" xmlns:gui="com.era7.util.gui.*">
	<s:layout>
		<s:VerticalLayout paddingLeft="15" 
						  paddingRight="15" 
						  paddingTop="15" 
						  paddingBottom="15" 
						  gap="12"/>
	</s:layout>
	<s:states>
		<s:State name="State1"/>
		<s:State name="LoadingState"/>
	</s:states>
	<fx:Declarations>
		<!-- Define the menu data. -->		
		<!--<fx:XML format="e4x" id="menuDataXML">
			<root>
				<menuitem label="File" >
					<menuitem label="Open BlastX file" enabled="true"/>
				</menuitem>
				<menuitem label="About">
					<menuitem label="About BlastX viewer" enabled="true"/>
					<menuitem label="Contact" enabled="true"/>
				</menuitem>
			</root>
		</fx:XML>-->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.era7.bioinfo.gui.IconsManager;
			import com.era7.bioinfo.gui.hsp.HspViewerTitleWindow;
			import com.era7.bioinfo.iso.BlastViewerIconsManager;
			import com.era7.bioinfo.iso.comm.BlastMapper;
			import com.era7.bioinfo.iso.comm.RequestList;
			import com.era7.bioinfo.iso.comm.UrlManager;
			import com.era7.bioinfo.gui.events.UrlEvent;
			import com.era7.bioinfo.gui.EnterUrlTitleWindow;
			import com.era7.bioinfo.xml.Protein;
			import com.era7.bioinfo.xml.blast.Hsp;
			import com.era7.communication.interfaces.ServerCallable;
			import com.era7.communication.interfaces.ServerUploadable;
			import com.era7.communication.managers.MainManager;
			import com.era7.communication.managers.UploadManager;
			import com.era7.communication.xml.Request;
			import com.era7.communication.xml.Response;
			import com.era7.util.events.SearchBarEvent;
			
			import flash.net.navigateToURL;
			
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			
			[Bindable]
			protected var xml:XML = null;
			[Bindable]
			protected var selectedProtein:XML = null;
			[Bindable]
			protected var selectedHsps:XML = null;
			
			protected var hspViewerTitleWindow:HspViewerTitleWindow = null;
			
			protected var rootMenu:Menu;
			
			public static const BAR_HEIGHT:Number = 25;
			public static const BAR_SEPARATOR:Number = 10;
			
			protected var isotigBars:Array = new Array();			
			protected var proteinHGroup:HBox = null;
			
			
			protected var blastMapper:BlastMapper = null;
			
			protected var urlTitleWindow:EnterUrlTitleWindow = null;
			
			public static const LOADING_STATE:String = "LoadingState"
			public static const BASE_STATE:String = "State1";

			
			/**
			 * 	CREATION COMPLETE
			 */
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				MainManager.DEBUG_MODE = false;
				MainManager.ADD_SESSION_ID_TO_REQUEST = false;
				MainManager.REQUEST_TIMEOUT = 3600;
				//MainManager.SESSION_ID = "1";
				
				blastMapper = new BlastMapper();			
				
				proteinsSearchBar.addEventListener(SearchBarEvent.SEARCH,onSearchProtein);
				proteinsSearchBar.addEventListener(SearchBarEvent.GO_TO_ELEMENT,onGoToElementProtein);
				
			}
			
			protected function initEnterUrlTitleWindow():void{
				if(urlTitleWindow == null){
					urlTitleWindow = EnterUrlTitleWindow(PopUpManager.createPopUp(this,EnterUrlTitleWindow,true));
					urlTitleWindow.addEventListener(UrlEvent.URL_SELECTED, onUrlSelected);
					PopUpManager.centerPopUp(urlTitleWindow);
				}
				PopUpManager.bringToFront(urlTitleWindow);
				urlTitleWindow.visible = true;
				
			}
			
			protected function onUrlSelected(event:UrlEvent):void{							
				
				blastMapper.loadBlastFileFromUrlAndGetCoverageXML(event.getUrl(),this);
				
				this.currentState = LOADING_STATE;
				
			}
			
			protected function onSearchProtein(event:SearchBarEvent):void{
				var items:XMLList = xml.protein;
				
				var results:Array = new Array();
				var list:XMLList = new XMLList();
				
				var selectedField:String = String(proteinsSearchComboBox.selectedItem);
				
				if(selectedField == "ID"){
					list = XMLList(items.((child("id")).text().toUpperCase().indexOf(event.getSearchText().toUpperCase()) >=0 ));
				}else if(selectedField == "Length"){
					list = XMLList(items.((child("length")).text().toUpperCase().indexOf(event.getSearchText().toUpperCase()) >=0 ));
				}else if(selectedField == "Number of Isotigs"){
					list = XMLList(items.((child("number_of_isotigs")).text().toUpperCase().indexOf(event.getSearchText().toUpperCase()) >=0 ));
				}
				
				for each(var tempXML:XML in list){
					var tempProtein:Protein = new Protein(tempXML);
					results.push(tempProtein.id);
				}
				proteinsSearchBar.setResults(results); 				
			}
			protected function onGoToElementProtein(event:SearchBarEvent):void{				
				var list:XMLList = XMLList(proteinsDataGrid.dataProvider);
				var found:Boolean = false;
				
				for(var i:int=0;i<list.length() && !found;i++){
					var tempProtein:Protein = new Protein(list[i]);
					if(tempProtein.id == event.getSearchText()){
						proteinsDataGrid.selectedIndex = i;	
						proteinsDataGrid.scrollToIndex(i);
						found = true;
						proteinsDataGrid_itemClickHandler(null);
					}
				}	
				
			}
			
			
			protected function initHspViewerTitleWindow():void{
				if(hspViewerTitleWindow == null){
					hspViewerTitleWindow = HspViewerTitleWindow(PopUpManager.createPopUp(this,HspViewerTitleWindow,false));
					PopUpManager.centerPopUp(hspViewerTitleWindow);
				}
				PopUpManager.bringToFront(hspViewerTitleWindow);
				hspViewerTitleWindow.visible = true;
			}
			
			protected function uploadFileButton_clickHandler(event:MouseEvent):void
			{
				blastMapper.uploadBlastAndGetCoverageXML(this);
			}
			
			protected function proteinsDataGrid_itemClickHandler(event:ListEvent):void
			{
				if(proteinsDataGrid.selectedItem != null){
					
					selectedProtein = XML(proteinsDataGrid.selectedItem);
					
					var contigList:XMLList = XMLList(selectedProtein.contig);
					var tempSeriesArray:Array = new Array();
					
					chartCanvas.removeAllChildren();
					labelsCanvas.removeAllChildren();
					
					var mainWidth:int = chartCanvas.width;
					var proteinLength:Number = selectedProtein.length;	
					
					var currentHeight:int = 0;
					
					//----------------protein bar----------------
					proteinHGroup = new HBox();
					
					proteinHGroup.height = BAR_HEIGHT;
					proteinHGroup.setStyle("backgroundColor", Math.random() * uint.MAX_VALUE);
					proteinHGroup.y = currentHeight;
					proteinHGroup.x = 0;
					//proteinHGroup.percentWidth = 100.0;
					proteinHGroup.width = mainWidth;
					chartCanvas.addChild(proteinHGroup);
					
					var proteinLabel:mx.controls.Label = new mx.controls.Label(); 
					proteinLabel.selectable = true;
					proteinLabel.x = 5;
					proteinLabel.y = currentHeight;
					proteinLabel.text = selectedProtein.id.toString();					
					labelsCanvas.addChild(proteinLabel);
					
					currentHeight += BAR_HEIGHT;
					currentHeight += BAR_SEPARATOR;
					
					isotigBars = new Array();
					
					//---------contig/isotigs bars------------------
					for each(var contig:XML in contigList){
						var hgroup:HBox = new HBox();
						
						hgroup.height = BAR_HEIGHT;
						
						var contigBegin:int = contig.begin;
						var contigEnd:int = contig.end;
						
						hgroup.y = currentHeight;
						contigBegin--;
						hgroup.x = Math.round((contigBegin * mainWidth)/proteinLength);	
						
						var tempWidth:Number = Math.round(((contigEnd - contigBegin) * mainWidth)/proteinLength);						
						//hgroup.percentWidth = Math.ceil((100.0 * tempWidth)/mainWidth); 
						hgroup.width = tempWidth;
						
						
						hgroup.setStyle("backgroundColor", Math.random() * uint.MAX_VALUE);
						
						isotigBars.push(hgroup);
						
						var contigLabel:mx.controls.Label = new mx.controls.Label(); 
						contigLabel.selectable = true;
						contigLabel.text = contig.id.toString();
						contigLabel.x = 5;
						contigLabel.y = currentHeight;
						labelsCanvas.addChild(contigLabel);
						
						currentHeight += BAR_HEIGHT;
						currentHeight += BAR_SEPARATOR;
						
						chartCanvas.addChild(hgroup);
						
					}
					
					selectFirstContig();
					
				}
			}
			
			protected function selectFirstContig():void{
				contigsDataGrid.selectedIndex = 0;
				contigsDataGrid_itemClickHandler(null);
			}
			
			protected function contigsDataGrid_itemClickHandler(event:ListEvent):void
			{
				if(contigsDataGrid.selectedItem != null){
					selectedHsps = XML(contigsDataGrid.selectedItem).hsps[0];					
				}
			}
			
			
			protected function proteinLengthSortCompareFunction(obj1:Object,obj2:Object):int{
				return genericNumberSortFunction(obj1,obj2,Protein.LENGTH_TAG_NAME);			
			}
			protected function proteinCoverageAbsoluteSortCompareFunction(obj1:Object,obj2:Object):int{
				return genericNumberSortFunction(obj1,obj2,Protein.PROTEIN_COVERAGE_ABSOLUTE_TAG_NAME);			
			}
			protected function proteinCoveragePercentageSortCompareFunction(obj1:Object,obj2:Object):int{
				return genericNumberSortFunction(obj1,obj2,Protein.PROTEIN_COVERAGE_PERCENTAGE_TAG_NAME);			
			}
			
			protected function contigFromSortCompareFunction(obj1:Object,obj2:Object):int{
				return genericNumberSortFunction(obj1,obj2,"begin");			
			}
			protected function contigToSortCompareFunction(obj1:Object,obj2:Object):int{
				return genericNumberSortFunction(obj1,obj2,"to");			
			}
			protected function numberOfIsotigsSortCompareFunction(obj1:Object,obj2:Object):int{
				return genericNumberSortFunction(obj1,obj2,"number_of_isotigs");			
			}
			
			protected function hspHitToSortCompareFunction(obj1:Object,obj2:Object):int{
				return genericNumberSortFunction(obj1,obj2,Hsp.HIT_TO_TAG_NAME);			
			}
			protected function hspHitFromSortCompareFunction(obj1:Object,obj2:Object):int{
				return genericNumberSortFunction(obj1,obj2,Hsp.HIT_FROM_TAG_NAME);			
			}
			protected function hspIdentitySortCompareFunction(obj1:Object,obj2:Object):int{
				return genericNumberSortFunction(obj1,obj2,Hsp.IDENTITY_TAG_NAME);			
			}
			
			protected function genericNumberSortFunction(obj1:Object,obj2:Object,tagName:String):int{
				var xml1:XML = XML(obj1);
				var xml2:XML = XML(obj2);
				
				var n1:Number = Number(xml1.child(tagName)[0]);
				var n2:Number = Number(xml2.child(tagName)[0]);
				if(n1 < n2){
					return -1;
				}  else if(n1 == n2){
					return 0;
				}  else{
					return 1;
				}
			}			
			
			protected function onHeaderClick():void{
				navigateToURL(new URLRequest("http://www.era7bioinformatics.com"));
			}
			
			protected function hspsDataGrid_itemDoubleClickHandler(event:ListEvent):void
			{
				if( hspsDataGrid.selectedItem != null){
					initHspViewerTitleWindow();
					hspViewerTitleWindow.setHsp(new Hsp(XML(hspsDataGrid.selectedItem)));
				}
			}
			
			
			//----------------------------------------------------------------------------
			//---------------------------SERVER COMMUNICATION-----------------------------
			//----------------------------------------------------------------------------
			
			
			/**
			 * 	PROCESS UPLOAD COMPLETED
			 */
			public function processUploadCompleted(response:Response):void{	
				
				if(response.getMethod() == RequestList.UPLOAD_BLAST_AND_GET_COVERAGE_XML_REQUEST){
					
					xml = XML(response.getContent().proteins[0]);
					proteinsDataGrid.selectedIndex = 0;
					proteinsDataGrid_itemClickHandler(null);
					
				}				
				
			}	
			/**
			 * 	PROCESS UPLOAD ERROR
			 */
			public function processUploadError(request:Request):void{
			}
			/**
			 * 	PROCESS UPLOAD CANCELLED
			 */
			public function processUploadCancelled(request:Request):void{
				
			}
			
			/**
			 * 	PROCESS SUCCESSFUL RESPONSE
			 */
			public function processSuccessfulResponse(response:Response):void{
				
				if(response.getMethod() == RequestList.LOAD_BLAST_FILE_FROM_URL_AND_GET_COVERAGE_XML_REQUEST){
									
					xml = XML(response.getContent().proteins[0]);
					proteinsDataGrid.selectedIndex = 0;
					proteinsDataGrid_itemClickHandler(null);
					
					this.currentState = BASE_STATE;
					
				}
			}
			/**
			 * 	PROCESS ERROR RESPONSE
			 */
			public function processErrorResponse(response:Response):void{
				Alert.show(response.getErrorItem().getDescription());
				
				this.currentState = BASE_STATE;
			}
			/**
			 * 	PROCESS NO SESSION RESPONSE
			 */
			public function processNoSessionResponse(response:Response):void{}
			/**
			 * 	PROCESS REQUEST TIMEOUT
			 */
			public function processRequestTimeout(request:Request):void{}
			
			//----------------------------------------------------------------------------
			//----------------------------------------------------------------------------
			
			
			
			protected function onUpdateComplete():void{
				
				for(var i:int = 0; i< isotigBars.length ; i++){
					
					var bar:HBox = isotigBars[i];
					
					//Debugger.appendText("percentage width: " + bar.percentWidth,Debugger.ERROR_MODE);
					var contigBegin:int = selectedProtein.contig[i].begin
					var contigEnd:int = selectedProtein.contig[i].end
					contigBegin--;					
					
					bar.x = Math.round((contigBegin * chartCanvas.width)/selectedProtein.length);			
					
					var tempWidth:Number = Math.round(((contigEnd - contigBegin) * chartCanvas.width)/Number(selectedProtein.length[0]));						
					//hgroup.percentWidth = Math.ceil((100.0 * tempWidth)/mainWidth); 
					
					bar.width = tempWidth;
					
					proteinHGroup.width = chartCanvas.width;
					
					//Debugger.appendText("chartCanvas.width = " + chartCanvas.width + "bar.width = " + bar.width, Debugger.ERROR_MODE);
					
					
					
					bar.validateNow();
				}
			}


			protected function helpButton_clickHandler(event:MouseEvent):void
			{
				navigateToURL(new URLRequest("https://s3-eu-west-1.amazonaws.com/pablo-tests/blastXViewer7Instructions.jpg"),"_blank");
			}


			protected function era7Logo_clickHandler(event:MouseEvent):void
			{
				navigateToURL(new URLRequest("http://www.era7bioinformatics.com"),"_blank");
			}


			protected function loadFileFromUrlButton_clickHandler(event:MouseEvent):void
			{
				initEnterUrlTitleWindow();
			}

		]]>
	</fx:Script>
	<s:HGroup height="80"  
			  width="100%"
			  verticalAlign="middle" 
			  paddingTop="0" 
			  paddingBottom="0" paddingRight="0" paddingLeft="0">
		<mx:Canvas 
				   cornerRadius="15" 
				   backgroundColor="#FFFFFF" 
				   height="100%" width="242">
					<mx:SWFLoader id="era7Logo"
						  source="{BlastViewerIconsManager.era7Icon}"
						  buttonMode="true"
						  mouseChildren="false"
						  useHandCursor="true" 
						  scaleContent="true" 
						  left="0" 
						  top="10"
						  click="era7Logo_clickHandler(event)"/>
		</mx:Canvas>
		
		<mx:Canvas width="100%" 
				   cornerRadius="15" 
				   backgroundColor="#52A2D2" 
				   height="100%">
			<mx:SWFLoader id="blastViewerLogo"
				source="{BlastViewerIconsManager.blastXViewer7Icon}"
				right="10" 
				verticalCenter="0" 
				height="60"/>			
		</mx:Canvas>
	</s:HGroup>
	<mx:VBox cornerRadius="10" 
			 paddingLeft="10" 
			 paddingTop="10" 
			 paddingRight="10" 
			 paddingBottom="10" 
			 backgroundColor="#E6E6E6" width="100%" height="100%" 
			 enabled.LoadingState="true" verticalAlign.LoadingState="middle" horizontalAlign.LoadingState="center">
		<s:HGroup width="100%"
				  id="menuHGroup" includeIn="State1">
			<mx:SWFLoader id="uploadFileButton"
					  source="{IconsManager.loadFileButton}"
					  click="uploadFileButton_clickHandler(event)"
					  buttonMode="true"
					  mouseChildren="false"
					  useHandCursor="true" 
					  height="35"/>
			<mx:SWFLoader id="loadFileFromUrlButton"
						  source="{IconsManager.loadFileFromUrlButton}"
						  click="loadFileFromUrlButton_clickHandler(event)"
						  buttonMode="true"
						  mouseChildren="false"
						  useHandCursor="true" 
						  height="35"/>
			<mx:SWFLoader id="helpButton"
					  source="{BlastViewerIconsManager.helpButton}"
					  click="helpButton_clickHandler(event)"
					  buttonMode="true"
					  mouseChildren="false"
					  useHandCursor="true" 
					  height="35"/>
		</s:HGroup>				  
		<mx:HDividedBox label="Contigs" width="100%" height="100%" includeIn="State1">
			<mx:VBox  width="45%" height="100%">
				<mx:HBox width="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5" 
						 paddingTop="5" paddingBottom="5">
					<s:ComboBox id="proteinsSearchComboBox" selectedIndex="0">
						<s:dataProvider>
							<mx:ArrayList>
								<fx:String>ID</fx:String>
								<fx:String>Length</fx:String>
								<fx:String>Number of Isotigs</fx:String>
							</mx:ArrayList>
						</s:dataProvider>
					</s:ComboBox>
					<search:SearchBar width="100%" id="proteinsSearchBar"
									  searchIcon="{IconsManager.searchIcon}"
									  nextResultIcon="{IconsManager.nextResultIcon}"
									  previousResultIcon="{IconsManager.previousResultIcon}">
					</search:SearchBar>
				</mx:HBox>
				<mx:DataGrid id="proteinsDataGrid" 
							 height="100%" width="100%"
							 dataProvider="{xml.protein}" 
							 itemClick="proteinsDataGrid_itemClickHandler(event)" 
							 selectable="true" >
					<mx:columns>
						<mx:DataGridColumn headerText="Protein ID" 
										   dataField="id"
										   itemRenderer="com.era7.bioinfo.gui.uniprot.UniprotIdItemRenderer"											   
										   />
						<mx:DataGridColumn headerText="Length" 
										   dataField="length"
										   sortDescending="true" 
										   sortCompareFunction="proteinLengthSortCompareFunction"
										   />
						<mx:DataGridColumn headerText="Number of isotigs"
										   dataField="number_of_isotigs"
										   sortDescending="true"
										   sortCompareFunction="numberOfIsotigsSortCompareFunction"
										   />
						<mx:DataGridColumn headerText="Coverage (abs)" 
										   dataField="protein_coverage_absolute"
										   sortDescending="true" 
										   sortCompareFunction="proteinCoverageAbsoluteSortCompareFunction"/>
						<mx:DataGridColumn headerText="Coverage (%)" 
										   dataField="protein_coverage_percentage"
										   sortDescending="true" 
										   sortCompareFunction="proteinCoveragePercentageSortCompareFunction"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
			<mx:VBox  width="55%" height="100%">
				<s:HGroup width="100%" verticalAlign="middle" height="33">
					<s:Label text="Coverage visualization" fontWeight="bold"/>
				</s:HGroup>
				
				<mx:VDividedBox width="100%" height="100%" horizontalAlign="center"	>
					<mx:HBox width="100%" paddingLeft="10" 
							  paddingRight="10" 
							  paddingTop="10" 
							  paddingBottom="10" 
							  contentBackgroundColor="#F6F6F6"
							  updateComplete="onUpdateComplete()" backgroundColor="#FFFFFF">
						<mx:Canvas id="labelsCanvas"						   
								   height="100%"/>
						<mx:Canvas id="chartCanvas"
								   width="100%"
								   height="100%"/>
					</mx:HBox>	
					<s:VGroup width="100%" height="100%">
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="Selected protein contigs" fontWeight="bold"/>
							<mx:Spacer width="100%"/>
							<s:Label text="(Click in a contig to refresh the hsps datagrid)" fontStyle="italic"/>
						</s:HGroup>
						<mx:DataGrid id="contigsDataGrid" 
									 width="100%" height="100%"
									 dataProvider="{selectedProtein.contig}"
									 selectable="true"
									 itemClick="contigsDataGrid_itemClickHandler(event)">
							<mx:columns>
								<mx:DataGridColumn headerText="Contig ID" 
												   dataField="id" />
								<mx:DataGridColumn headerText="From" 
												   dataField="begin" 
												   sortCompareFunction="contigFromSortCompareFunction"/>
								<mx:DataGridColumn headerText="To" 
												   dataField="end" 
												   sortCompareFunction="contigToSortCompareFunction"/>
							</mx:columns>
						</mx:DataGrid>	
					</s:VGroup>	
					<s:VGroup width="100%" height="100%">
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="Hsps from selected contig" fontWeight="bold"/>
							<mx:Spacer width="100%"/>
							<s:Label text="(Please double-click in a hsp to view its data)" fontStyle="italic"/>
						</s:HGroup>
						<mx:DataGrid id="hspsDataGrid" 
									 width="100%" height="100%"
									 dataProvider="{selectedHsps.Hsp}"
									 selectable="true"
									 itemDoubleClick="hspsDataGrid_itemDoubleClickHandler(event)"
									 doubleClickEnabled="true">
							<mx:columns>
								<mx:DataGridColumn headerText="Hit from" 
												   dataField="{Hsp.HIT_FROM_TAG_NAME}"
												   sortCompareFunction="hspHitFromSortCompareFunction"/>
								<mx:DataGridColumn headerText="Hit to" 
												   dataField="{Hsp.HIT_TO_TAG_NAME}" 
												   sortCompareFunction="hspHitToSortCompareFunction"/>
								<mx:DataGridColumn headerText="Identity" 
												   dataField="{Hsp.IDENTITY_TAG_NAME}" 
												   sortCompareFunction="hspIdentitySortCompareFunction"/>
							</mx:columns>
						</mx:DataGrid>
					</s:VGroup>						
				</mx:VDividedBox>					
			</mx:VBox>									
		</mx:HDividedBox>	
		<mx:SWFLoader includeIn="LoadingState" 
				source="{IconsManager.loadingSWF}"/>
	</mx:VBox>			
</s:Application>
